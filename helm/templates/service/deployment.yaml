{{ if ne .Values.env "dev" }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-service
{{ include "sbomer.labels" (list . "service") | indent 2 }}
spec:
  replicas: 1
  selector:
    matchLabels:
{{ include "sbomer.selector" (list . "service") | indent 6 }}
  template:
    metadata:
{{ include "sbomer.labels" (list . "service") | indent 6 }}
      annotations:
        sbomer-secret: sbomer-secrets
    spec:
      serviceAccountName: {{ include "sbomer.serviceAccountName" . }}
      initContainers:
        - image: quay.io/rh-newcastle/pnc-vault-secrets:1.0.1
          name: get-vault-secrets
          resources:
            limits:
              cpu: 0.2
              memory: 200Mi
            requests:
              cpu: 0.2
              memory: 200Mi
          command:
            - /bin/bash
          args:
            - -c
            - cd /mnt/secrets;
              pnc-vault-secrets dump $(SBOMER_SECRET_NAME)-$(APP_ENV);
              echo "#!/bin/bash" >> /mnt/secrets/env.sh;
              echo "export CONSUMER_TOPIC=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/consumer.topic)\"" >> /mnt/secrets/env.sh;
              echo "export PRODUCER_TOPIC=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/producer.topic)\"" >> /mnt/secrets/env.sh;
              echo "export UMB_BROKER_HOST=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/umb-broker.host)\"" >> /mnt/secrets/env.sh;
              echo "export UMB_BROKER_PORT=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/umb-broker.port)\"" >> /mnt/secrets/env.sh;
              echo "export UMB_BROKER_URL=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/qpid-jms.url)\"" >> /mnt/secrets/env.sh;
              echo "export QUARKUS_OIDC_AUTH_SERVER_URL=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/auth-server-url.txt)\"" >> /mnt/secrets/env.sh;
              echo "export QUARKUS_DATASOURCE_USERNAME=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/datasource.user)\"" >> /mnt/secrets/env.sh;
              echo "export QUARKUS_DATASOURCE_PASSWORD=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/datasource.password)\"" >> /mnt/secrets/env.sh;
              echo "export QUARKUS_DATASOURCE_JDBC_URL=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/datasource.connection)\"" >> /mnt/secrets/env.sh;
              echo "export KEYSTORE_PASSWORD=\"$(cat /mnt/secrets/${SBOMER_SECRET_NAME}-${APP_ENV}/${APP_ENV}-pnc-sbomer.password)\"" >> /mnt/secrets/env.sh;
              source /mnt/secrets/env.sh;
          env:
            - name: VAULT_ADDR
              valueFrom:
                secretKeyRef:
                  name: vault-connection-info
                  key: vault-address
            - name: VAULT_APP_ROLE_ID
              valueFrom:
                secretKeyRef:
                  name: vault-connection-info
                  key: vault-app-role-id
            - name: VAULT_APP_SECRET_ID
              valueFrom:
                secretKeyRef:
                  name: vault-connection-info
                  key: vault-app-secret-id
            - name: SBOMER_SECRET_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['sbomer-secret']
            - name: APP_ENV
              value: {{ .Values.env }}
          volumeMounts:
            - name: secrets-workdir
              mountPath: /mnt/secrets
      containers:
        - image: {{ .Values.service.image.repository }}:{{ .Values.service.image.tag }}
          name: {{ .Release.Name }}-service
          imagePullPolicy: {{ .Values.cache.image.pullPolicy }}
          env:
            - name: APP_ENV
              value: {{ .Values.env }}
            - name: SBOMER_ROUTE_HOST
              value: {{ .Values.service.route.infinibloxHost }}
            - name: SBOMER_SECRET_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.annotations['sbomer-secret']
            - name: SBOMER_SBOM_DIR
              value: "/data"
            - name: SBOMER_TEKTON_SA
              value: {{ include "sbomer.serviceAccountName" . }}
            - name: OTLP_EXPORTER_ENDPOINT
              value: {{ .Values.otlp.endpoint }}
            - name: OTLP_RESOURCE_ATTRIBUTES
              value: {{ .Values.otlp.attributes }}

          ports:
            - containerPort: 8080
              name: http
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /q/health
              port: 8080
            periodSeconds: 10
          startupProbe:
            httpGet:
              path: /q/health
              port: 8080
            failureThreshold: 60
            periodSeconds: 5
          volumeMounts:
            - mountPath: /data
              name: sbomer-data
            - mountPath: /mnt/secrets
              name: secrets-workdir
              readOnly: true
            - name: sbomer-certs-volume
              mountPath: /etc/pki/ca-trust/source/anchors
              subPath: ca-trust/source/anchors
            - name: sbomer-certs-volume
              mountPath: /etc/pki/ca-trust/extracted
              subPath: ca-trust/extracted
            - name: volume-thread-dump
              mountPath: /mnt/thread-dump
            - name: volume-thread-heap-dump-script
              mountPath: /mnt/thread-heap-dump-script
          resources:
            requests:
              cpu: 1000m
              memory: 2000Mi
            limits:
              cpu: 1000m
              memory: 2000Mi
      volumes:
        - name: sbomer-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-sboms
        - name: secrets-workdir
          emptyDir:
            medium: Memory
        - name: sbomer-certs-volume
          persistentVolumeClaim:
            claimName: sbomer-ca-trust-certificate
        - name: volume-thread-dump
          persistentVolumeClaim:
            claimName: pnc-threaddump
        - name: volume-thread-heap-dump-script
          configMap:
            defaultMode: 360
            name: pnc-thread-heap-dump
{{ end }}
