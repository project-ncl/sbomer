#
# JBoss, Home of Professional Open Source.
# Copyright 2023 Red Hat, Inc., and individual contributors
# as indicated by the @author tags.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: build-env
spec:
  params:
    - name: build-id
      type: string
    - name: build-env-jdk
      type: string
    - name: build-env-mvn
      type: string
  steps:
    - name: prepare
      image: sbomer-generator
      imagePullPolicy: IfNotPresent
      script: |
        #!/usr/bin/env python3

        import json
        import re
        from urllib.parse import urljoin
        import urllib.request


        BUILD_API_ENDPOINT = "https://orch.psi.redhat.com/pnc-rest/v2/builds/"
        BUILD_ID = "$(params.build-id)"

        JDK_RESULTS_FILE = "$(results.jdk-version.path)"
        MVN_RESULTS_FILE = "$(results.mvn-version.path)"

        DEFAULT_JDK = 8
        DEFAULT_MVN = 3.6

        JDK_8 = re.compile(r"(1\.8)(\.*)")
        JDK_11 = re.compile(r"(11)(\.*)")
        JDK_17 = re.compile(r"(17)(\.*)")

        MVN_3_6 = re.compile(r"(3\.6)(\.*)")
        MVN_3_8 = re.compile(r"(3\.8)(\.*)")
        MVN_3_9 = re.compile(r"(3\.9)(\.*)")

        if (not "$(params.build-env-jdk)" or not "$(params.build-env-mvn)"):
            url = urljoin(BUILD_API_ENDPOINT, BUILD_ID)
            req = urllib.request.Request(url)
            req.add_header("Content-Type", "application/json")
            response = urllib.request.urlopen(req)
            body = response.read()
            build_info = json.loads(body.decode("utf-8"))
            build_env_attr = build_info["environment"]["attributes"]
            jdk_version = build_env_attr["JDK"]
            mvn_version = build_env_attr["MAVEN"]
        else:
            jdk_version = "$(params.build-env-jdk)"
            mvn_version = "$(params.build-env-mvn)"

        if re.match(JDK_8, jdk_version):
            sdk_jdk_ver = 8
        elif re.match(JDK_11, jdk_version):
            sdk_jdk_ver = 11
        elif re.match(JDK_17, jdk_version):
            sdk_jdk_ver = 17
        else:
            sdk_jdk_ver = DEFAULT_JDK

        print(f"Setting JDK {sdk_jdk_ver} for the current pipeline!")
        with open(JDK_RESULTS_FILE, "w") as f:
            f.write(str(sdk_jdk_ver))

        if re.match(MVN_3_6, mvn_version):
            sdk_mvn_ver = 3.6
        elif re.match(MVN_3_8, mvn_version):
            sdk_mvn_ver = 3.8
        elif re.match(MVN_3_9, mvn_version):
            sdk_mvn_ver = 3.9
        else:
            sdk_mvn_ver = DEFAULT_MVN

        print(f"Setting MVN {sdk_mvn_ver} for the current pipeline!")
        with open(MVN_RESULTS_FILE, "w") as f:
            f.write(str(sdk_mvn_ver))
  results:
    - name: mvn-version
      description: Parsed Maven version
    - name: jdk-version
      description: Parsed JDK version
  workspaces:
    - name: data
      description: data workspace
