/*
 * JBoss, Home of Professional Open Source.
 * Copyright 2023 Red Hat, Inc., and individual contributors
 * as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package org.jboss.sbomer.service.feature.s3;

import java.io.File;
import java.nio.file.Path;
import java.util.ArrayList;
import java.util.List;

import org.jboss.sbomer.core.errors.ApplicationException;
import org.jboss.sbomer.core.errors.NotFoundException;
import org.jboss.sbomer.core.errors.ServiceUnavailableException;
import org.jboss.sbomer.service.feature.FeatureFlags;
import org.jboss.sbomer.service.feature.sbom.config.GenerationRequestControllerConfig;
import org.jboss.sbomer.service.feature.sbom.k8s.model.GenerationRequest;
import org.jboss.sbomer.service.feature.sbom.model.SbomGenerationRequest;
import org.jboss.sbomer.service.feature.sbom.service.SbomService;

import jakarta.enterprise.context.ApplicationScoped;
import jakarta.inject.Inject;
import lombok.extern.slf4j.Slf4j;

@ApplicationScoped
@Slf4j
public class S3StorageHandler {

    @Inject
    GenerationRequestControllerConfig controllerConfig;

    @Inject
    FeatureFlags featureFlags;

    @Inject
    S3ClientFacade client;

    @Inject
    SbomService sbomService;

    /**
     * Returns all paths to files found under a given {@code rootDirectory}.
     *
     * @param rootDirectory
     * @return List of paths to all files.
     */
    private List<String> getFilePaths(File rootDirectory) {
        List<String> filePaths = new ArrayList<>();

        if (rootDirectory.exists() && rootDirectory.isDirectory()) {
            S3StorageHandler.getAllFileNamesRecursive(rootDirectory, filePaths);
        } else {
            log.error(
                    "The '{}' path does not exist or is not a directory! Cannot read log files from it. Uploading files will be skipped.",
                    rootDirectory);
        }

        return filePaths;
    }

    /**
     * Populates the {@code filePaths} with absolute paths to files located under the {@code directory}.
     *
     * @param directory
     * @param filePaths
     */
    private static void getAllFileNamesRecursive(File directory, List<String> filePaths) {
        log.debug("Handling '{}' directory...", directory.getAbsolutePath());

        File[] files = directory.listFiles();

        if (files == null) {
            log.debug("Provided directory is empty or unable to read files, ignoring");
            return;
        }

        for (File file : files) {
            log.debug("Examining path '{}'...", file.getName());

            if (file.getName().startsWith(".")) {
                log.debug("Skipping '{}', because it's a hidden file", file.getName());
                continue;
            }

            if (file.isDirectory()) {
                S3StorageHandler.getAllFileNamesRecursive(file, filePaths);
            } else {
                filePaths.add(file.getAbsolutePath());
            }
        }
    }

    /**
     * Stores all files generated by a particular {@code GenerationRequest}. This includes logs and potentially other
     * artifacts as well. Does not re-upload the file if it already exists in the storage.
     *
     * @param generationRequest The {@code GenerationRequest}
     */
    public void storeFiles(GenerationRequest generationRequest) {
        if (!featureFlags.s3Storage()) {
            log.warn(
                    "Storing data in S3 is disabled, won't store results for GenerationRequest '{}'",
                    generationRequest.getId());
            return;
        }

        client.ensureClient();

        if (generationRequest == null) {
            throw new ApplicationException("No GenerationRequest provided!");
        }

        log.info("Storing data in S3 for Generation request '{}'", generationRequest.getId());

        File generationRootDir = Path.of(controllerConfig.sbomDir(), generationRequest.getMetadata().getName())
                .toFile();

        log.debug("Using '{}' directory to scan for files to be uploaded to S3", generationRootDir.getAbsolutePath());

        List<String> filePaths = getFilePaths(generationRootDir);

        log.debug("Found {} files: {}", filePaths.size(), filePaths);

        filePaths.forEach(path -> {
            String key = path.replaceFirst(generationRootDir.getAbsolutePath(), generationRequest.getId());
            if (!client.doesObjectExists(key)) {
                client.upload(path, key);
            }
        });
    }

    /**
     * Returns list of paths within the S3 bucket to log files for a given {@link GenerationRequest} identifier.
     *
     * @param generationRequestId
     * @return
     */
    public List<String> listLogFilesInBucket(String generationRequestId) {
        SbomGenerationRequest generationRequest = SbomGenerationRequest.findById(generationRequestId);

        if (generationRequest == null) {
            throw new NotFoundException("GenerationRequest with id '{}' could not be found", generationRequestId);
        }

        if (!generationRequest.getStatus().isFinal()) {
            throw new ServiceUnavailableException(
                    "Log files cannot be returned, because the GenerationRequest '{}' did not finsh yet",
                    generationRequestId);
        }

        return client.logFileNames(generationRequestId);
    }

    /**
     * Get log file for a given {@link GenerationRequest} and the requested path.
     *
     * @param generationRequestId
     * @return
     */
    public String getLog(String generationRequestId, String path) {
        SbomGenerationRequest generationRequest = SbomGenerationRequest.findById(generationRequestId);

        if (generationRequest == null) {
            throw new NotFoundException("GenerationRequest with id '{}' could not be found", generationRequestId);
        }

        if (!generationRequest.getStatus().isFinal()) {
            throw new ServiceUnavailableException(
                    "Log files cannot be returned, because the GenerationRequest '{}' did not finsh yet",
                    generationRequestId);
        }

        return client.log(generationRequestId, path);
    }
}
